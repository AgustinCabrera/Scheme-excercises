(define (root tree)(car tree))
(define (left tree)(cadr tree))
(define (right tree)(caddr tree))
(define (tree-empty? tree)(null? tree))
(define (is-sheet? tree)(and(not(tree-empty? tree))
                            (tree-empty? (left tree))
                            (tree-empty? (right tree))))
(define my-tree '(a(c(t()())
                      (r(q()())(z()())))
                  (j(h ()())
                    (m()()))))
(define(Horizontal-route tree)
  (walk-tree(list tree)))

(define (walk-tree lista)
  (if(null? lista)
     '()
     (if(tree-empty?(car lista)) ; 
        (walk-tree(cdr lista))
        (cons(root (car lista))
             (walk-tree(append(cdr lista)
                                    (list(left(car lista))
                                         (right(car lista)))))
             )
        )
     )
  )
